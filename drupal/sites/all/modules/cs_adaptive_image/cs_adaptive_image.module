<?php
/**
 * @file
 * The main module file for the Client-side adaptive image module.
 */

/**
 * Implements hook_menu().
 */
function cs_adaptive_image_menu() {
  $items['admin/config/media/cs-adaptive-image'] = array(
    'title' => 'Adaptive images',
    'description' => 'Change the number of configurable breakpoints available in adaptive image display settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cs_adaptive_image_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'cs_adaptive_image.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function cs_adaptive_image_theme() {
  return array(
    'cs_adaptive_image_formatter' => array(
      'variables' => array('item' => NULL, 'path' => NULL, 'breakpoint_styles' => NULL, 'max_style' => NULL, 'fallback_style' => NULL),
    ),
    'cs_adaptive_image_styles_form' => array(
      'render element' => 'styles',
      'file' => 'cs_adaptive_image.admin.inc',
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function cs_adaptive_image_field_formatter_info() {
  return array(
    'cs_adaptive_image' => array(
      'label' => t('Adaptive image'),
      'field types' => array('image'),
      'description' => t('Display the image using specific image styles for different browser widths.'),
      'settings' => array(
        'image_link' => '',
        'styles' => '',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function cs_adaptive_image_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $image_styles = image_style_options(FALSE);

  $link_types = array(
    'content' => t('Content'),
    'file' => t('File'),
  );
  $form['image_link'] = array(
    '#title' => t('Link image to'),
    '#type' => 'select',
    '#default_value' => $settings['image_link'],
    '#empty_option' => t('Nothing'),
    '#options' => $link_types,
  );
  $form['styles'] = array(
    '#tree' => TRUE,
    '#theme' => 'cs_adaptive_image_styles_form',
  );
  for ($i = 1; $i <= variable_get('cs_adaptive_image_breakpoint_count', 5); $i++) {
    $form['styles']['breakpoint_' . $i] = array(
      '#title' => t('Client width breakpoint @key', array('@key' => $i)),
      '#title_display' => 'invisible',
      '#type' => 'textfield',
      '#default_value' => isset($settings['styles']['breakpoint_' . $i]) ? $settings['styles']['breakpoint_' . $i] : '',
      '#maxlength' => 5,
      '#size' => 5,
      '#field_suffix' => 'px',
      '#element_validate' => array('element_validate_integer_positive'),
    );
    $form['styles']['style_' . $i] = array(
      '#title' => t('Image style for breakpoint @key', array('@key' => $i)),
      '#title_display' => 'invisible',
      '#type' => 'select',
      '#default_value' => isset($settings['styles']['style_' . $i]) ? $settings['styles']['style_' . $i] : '',
      '#empty_option' => t('None (original image)'),
      '#options' => $image_styles,
    );
  }
  $form['styles']['max_style'] = array(
    '#title' => t('Maximum'),
    '#title_display' => 'invisible',
    '#description' => t('Image style to use when the client width exceeds the widest value specified above.'),
    '#type' => 'select',
    '#default_value' => $settings['styles']['max_style'],
    '#empty_option' => t('None (original image)'),
    '#options' => $image_styles,
  );
  $form['styles']['fallback_style'] = array(
    '#title' => t('Fallback'),
    '#title_display' => 'invisible',
    '#description' => t('Image style to use when the client does not support JavaScript.'),
    '#type' => 'select',
    '#default_value' => $settings['styles']['fallback_style'],
    '#empty_option' => t('None (original image)'),
    '#options' => $image_styles,
  );

  return $form;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function cs_adaptive_image_field_formatter_settings_summary($field, $instance, $view_mode) {
  $summary = array();
  $settings = $instance['display'][$view_mode]['settings'];

  for ($i = 1; $i <= variable_get('cs_adaptive_image_breakpoint_count', 5); $i++) {
    if (isset($settings['styles']['breakpoint_' . $i]) && isset($settings['styles']['style_' . $i])) {
      $breakpoint = $settings['styles']['breakpoint_' . $i];
      if ($breakpoint > 0) {
        $summary[] = t('Client widths up to @width px &rarr; Image style: @style', array('@width' => $breakpoint, '@style' => _cs_adaptive_image_view_image_style($settings['styles']['style_' . $i])));
      }
    }
  }
  $summary[] = t('Maximum &rarr; Image style: @style', array('@style' => _cs_adaptive_image_view_image_style(isset($settings['styles']['max_style']) ? $settings['styles']['max_style'] : '')));
  $summary[] = t('Fallback &rarr; Image style: @style', array('@style' => _cs_adaptive_image_view_image_style(isset($settings['styles']['fallback_style']) ? $settings['styles']['fallback_style'] : '')));

  $link_types = array(
    'content' => t('Linked to content'),
    'file' => t('Linked to file'),
  );
  // Display this setting only if image is linked.
  if (isset($link_types[$settings['image_link']])) {
    $summary[] = $link_types[$settings['image_link']];
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function cs_adaptive_image_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  // Check if the formatter involves a link.
  if ($settings['image_link'] == 'content') {
    $uri = entity_uri($entity_type, $entity);
  }
  elseif ($settings['image_link'] == 'file') {
    $link_file = TRUE;
  }

  foreach ($items as $delta => $item) {
    if (isset($link_file)) {
      $uri = array(
        'path' => file_create_url($item['uri']),
        'options' => array(),
      );
    }
    $styles = array();
    for ($i = 1; $i <= variable_get('cs_adaptive_image_breakpoint_count', 5); $i++) {
      // If breakpoint is defined.
      if (isset($settings['styles']['breakpoint_' . $i]) && isset($settings['styles']['style_' . $i]) && $settings['styles']['breakpoint_' . $i] > 0) {
        // Associate valid style to breakpoint.
        $styles[$settings['styles']['breakpoint_' . $i]] = _cs_adaptive_image_check_image_style($settings['styles']['style_' . $i]);
      }
    }
    $element[$delta] = array(
      '#theme' => 'cs_adaptive_image_formatter',
      '#item' => $item,
      '#breakpoint_styles' => $styles,
      '#max_style' => isset($settings['styles']['max_style']) ? _cs_adaptive_image_check_image_style($settings['styles']['max_style']) : '',
      '#fallback_style' => isset($settings['styles']['fallback_style']) ? _cs_adaptive_image_check_image_style($settings['styles']['fallback_style']) : '',
      '#path' => isset($uri) ? $uri : '',
    );
  }

  return $element;
}

/**
 * Preprocess function for theme_cs_adaptive_image_formatter().
 */
function cs_adaptive_image_preprocess_cs_adaptive_image_formatter(&$variables) {
  drupal_add_js(drupal_get_path('module', 'cs_adaptive_image') . '/cs_adaptive_image.js', 'file');
}

/**
 * Returns HTML for an adaptive image formatter.
 *
 * @param $variables
 *   An associative array containing:
 *   - item: An array of image data.
 *   - path: An array containing the link 'path' and link 'options'.
 *   - styles: An array of styles, keyed by break point width.
 *   - max_style: The image style to use for any larger width.
 *   - fallback_style: The fallback image style.
 *
 * @ingroup themeable
 */
function theme_cs_adaptive_image_formatter($variables) {
  $item = $variables['item'];
  $image = array(
    'path' => $item['uri'],
    'alt' => $item['alt'],
  );

  // Title attribute, if not empty.
  if (drupal_strlen($item['title']) > 0) {
    $image['title'] = $item['title'];
  }

  // Width and height attributes.
  if (isset($item['width']) && isset($item['height'])) {
    $image['width'] = $item['width'];
    $image['height'] = $item['height'];
  }

  // Output fallback image that will work without JavaScript.
  $image_output = _cs_adaptive_image_view_image($image, $variables['fallback_style']);

  // Prepare attributes that will be picked up by our JavaScript code
  // to serve an adapted image. Some browsers cannot access the
  // children of a <noscript> element, thus all the data needs to be
  // attached to the <noscript> element.
  $image['attributes']['class'][] = 'adaptive-image';
  $attributes['class'][] = 'adaptive-image';
  if (isset($variables['breakpoint_styles'])) {
    foreach ($variables['breakpoint_styles'] as $breakpoint => $style_name) {
      $image['attributes']['data-adaptive-image-breakpoint'] = $breakpoint;
      $attributes['data-adaptive-image-breakpoints'][] = $breakpoint; // Append to list of breakpoints.
      $attributes['data-adaptive-image-' . $breakpoint . '-img'] = _cs_adaptive_image_view_image($image, $style_name);
    }
  }
  $image['attributes']['data-adaptive-image-breakpoint'] = 'max';
  $attributes['data-adaptive-image-max-img'] = _cs_adaptive_image_view_image($image, $variables['max_style']);

  // Output the <noscript> element with its data attributes.
  $output = theme('html_tag', array('element' => array('#tag' => 'noscript', '#value' => $image_output, '#attributes' => $attributes)));

  // Output as link, if required.
  if (isset($variables['path']['path']) && drupal_strlen($variables['path']['path']) > 0) {
    $output = l($output, $variables['path']['path'], array_merge($variables['path']['options'], array('html' => TRUE)));
  }

  return $output;
}

/**
 * Displays the name of an image style, ensuring that the style actually exists.
 */
function _cs_adaptive_image_view_image_style($style_name) {
  if ($style_name) {
    $image_styles = image_style_options(FALSE);
    // Unset the potential 'No defined styles' option.
    unset($image_styles['']);

    // Ensure that we return an existing style.
    if (isset($image_styles[$style_name])) {
      return $image_styles[$style_name];
    }
  }
  return t('Original image'); // Default.
}

/**
 * Checks if the specified style exists. If it does not exists, return
 * the original image style.
 */
function _cs_adaptive_image_check_image_style($style_name) {
  $image_styles = image_style_options();
  if (isset($image_styles[$style_name])) {
    return $style_name;
  }
  else {
    return '';
  }
}

/**
 * Outputs an image based on the specified image style.
 */
function _cs_adaptive_image_view_image($image, $style_name) {
  if ($style_name) {
    $image['style_name'] = $style_name;
    return theme('image_style', $image);
  }
  else {
    return theme('image', $image); // Original image.
  }
}

